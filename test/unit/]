/*
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

'use strict';

var assert = require('assert');
var sysrev = require('../../lib/sysrev/sysrev')({systemsRoot: '/tmp/nfd/systems'});
var meta = require('../../lib/sysrev/sysrevMeta')({systemsRoot: '/tmp/nfd/systems'});

describe('sysrev test', function() {

  beforeEach(function(done) {
    done();
  });



  afterEach(function(done) {
    done();
  });



  it('should create a repository', function(done){
    sysrev.boot(function(err) {
      assert(!err);
      sysrev.createSystem('test', 'test', function(err, systemId) {
        assert(!err);
        sysrev.listRevisions(systemId, function(err, revs) {
          assert(!err);
          assert(revs);
          done();
        });
      });
    });
  });



  it('should get a revision', function(done){
    sysrev.listRevisions(sysrev.sid('test', 'test'), function(err, revs) {
      assert(!err);
      sysrev.getRevision(sysrev.sid('test', 'test'), revs[0].id, function(err, json) {
        done();
      });
    });
  });



  it('should create a new revision', function(done){
    sysrev.listRevisions(sysrev.sid('test', 'test'), function(err, revs) {
      assert(!err);
      sysrev.getRevision(sysrev.sid('test', 'test'), revs[0].id, function(err, json) {
        json.containerDefinitions.push({'1234': { 'fish': 'cheese'}});
        sysrev.commitRevision(sysrev.sid('test', 'test'), , description, sysJson, cb) {
        
        getRevision(sysrev.sid('test', 'test'), revs[0].id, function(err, json) {
        done();
      });
    });
  });
});

